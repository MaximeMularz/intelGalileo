/*
A simple node.js application intended to read data from Analog pins on the Intel based development boards such as the Intel(R) Galileo and Edison with Arduino breakout board.
MRAA - Low Level Skeleton Library for Communication on GNU/Linux platforms
Library in C/C++ to interface with Galileo & other Intel platforms, in a structured and sane API with port nanmes/numbering that match boards & with bindings to javascript & python.
The intent is to make it easier for developers and sensor manufacturers to map their sensors & actuators on top of supported hardware and to allow control of low level communication protocol by high level languages & constructs.
*/
var mraa = require('mraa'); //require mraa
var fs = require('fs');
console.log('MRAA Version: ' + mraa.getVersion()); //write the mraa version to the console
var B = 3975;
var analogPin0 = new mraa.Aio(0); //setup access analog input Analog pin #0 (A0)
var file = "data.csv";
var nodemailer = require('nodemailer');
var transporter = nodemailer.createTransport("SMTP",{
service: 'Gmail',
auth: {
user: 'max.mularz@gmail.com',
pass: 'Qjj9gSh7'
}
});
// setup e-mail data with unicode symbols
var mailOptions = {
from: 'Maxime <max.mularz@gmail.com>', // sender address
to: 'maxime.mularz@4planet.eu', // list of receivers
subject: 'Hello', // Subject line
text: 'Hello world ', // plaintext body
html: '<b>Hello world </b>' // html body
};
var CronJob = require('cron').CronJob;
//new CronJob('00 */1 * * * *', function(){ toutes les minutes
new CronJob('00 * */12 * * *', function(){    
console.log('You will see this message every 12hours');
transporter.sendMail(mailOptions, function(error, info){
if(error){
console.log(error);
}else{
console.log('Message sent: ' + info.response);
}
});
}, null, true);
// todo


setInterval(function() {
var analogValue = analogPin0.read(); //read the value of the analog pin
/*console.log(analogValue); //write the value of the analog pin to the console
console.log("Checking....");
console.log("Analog Pin (A0) Output: " + analogValue);*/
var resistance = (1023 - analogValue) * 10000 / analogValue; //get the resistance of the sensor;
//console.log("Resistance: "+resistance);
var celsius_temperature = 1 / (Math.log(resistance / 10000) / B + 1 / 298.15) - 273.15;//convert to temperature via datasheet ;
//console.log("Celsius Temperature "+celsius_temperature);  
fs.appendFile("data.csv",celsius_temperature + "\t" + Date() +"\n", function(err) {
if(err) {
console.log(err);
}else {
console.log("The file was saved!");
}
});
},120000);    
